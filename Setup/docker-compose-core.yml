version: '3.3'

# Ericom Shield Stack Description
# YML file for Rel-18.08 Core Components

services:
    dns:
        image: 'securebrowsing/shield-dns:latest'
        networks:
            - shield-core
        hostname: dns
        deploy:
            replicas: 2
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.management==yes]}
            update_config: {failure_action: rollback}
            resources: {limits: {memory: 1GB, cpus: '1.5'}}
        environment:
            - 'TZ=UTC'
            - 'LOGSTASH_FIELDS=service=dns'
            - 'UPSTREAM_DNS_SERVERS=${UPSTREAM_DNS_SERVERS}'
    netdata:
        image: 'securebrowsing/netdata:latest'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        networks:
            - shield-core
        hostname: netdata
        ports:
            - {target: 19999, published: 8383, protocol: tcp}
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            resources: {limits: {cpus: '0.20', memory: 256M}}
# netdata will not be deployed by default (need to add label:netdata):            
            placement: {constraints: [node.labels.netdata==yes]}
        environment:
            - 'TZ=UTC'
    maintenance:
        image: 'securebrowsing/shield-maintenance:latest'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        networks:
            - shield-core
        hostname: maintenance
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            resources: {limits: {memory: 2GB, cpus: '0.5'}}
        environment:
            - 'TZ=UTC'
            - 'IMAGE_CLEAN_INTERVAL=1h'
            - 'RUN_TIME=23:59'
            - 'LOGSTASH_FIELDS=service=maintenance'
    collector:
        image: 'securebrowsing/shield-collector:latest'
        networks:
            - shield-core
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/dev:/hostdev'
        hostname: '{{.Node.ID}}-{{.Service.Name}}'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=collector'
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
    elk:
        image: 'securebrowsing/shield-elk:latest'
#        ports:
#            - '5601:5601'
#            - '9200:9200'
#            - '5014:5014'
        networks:
            - shield-core
        environment:
            - 'TZ=UTC'
            - 'REINDEX_RUNINNG_INTERVAL=30s'
            - 'CLEAN_RUNINNG_INTERVAL=12h'
            - 'LOGSPOUT=ignore'
            - 'HEAP_SIZE=2g'
        deploy:
            replicas: 1
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.management==yes]}
            update_config: {failure_action: rollback}
            resources: {limits: {memory: 4GB, cpus: '2'}}
        volumes:
            - 'elastic:/opt/elasticsearch/data'
    logspout:
        image: 'securebrowsing/shield-logspout:latest'
        networks:
            - shield-core
        volumes:
            - '/etc/hostname:/etc/host_hostname:ro'
            - '/var/run/docker.sock:/var/run/docker.sock'
        environment:
            - 'TZ=UTC'
            - 'ROUTE_URIS=logstash+tcp://elk:5025'
            - 'RETRY_STARTUP=true'
            #- "DEBUG=1"
        deploy:
            mode: global
            resources: {limits: {cpus: '0.20', memory: 256M}, reservations: {cpus: '0.10', memory: 128M}}
    consul-server:
        image: 'securebrowsing/shield-configuration:latest'
        networks:
            - shield-core
        deploy:
            mode: replicated   #single node
            replicas: 5        #single node
            #mode: global      #multi node
            endpoint_mode: dnsrr
            placement: {constraints: [node.labels.management==yes]}
            update_config: {parallelism: 1, failure_action: rollback, delay: 100s}
            restart_policy: {condition: any}
            resources: {limits: {memory: 1GB, cpus: '1'}}
        environment:
            - 'TZ=UTC'
            - 'CONSUL_BIND_INTERFACE=eth0'
            - 'NUMBER_OF_EXPECTED=3' # works for single and multi node
            - 'LOGSTASH_FIELDS=service=consulserver'
        volumes:
            - {type: bind, source: /usr/local/ericomshield/backup, target: /consul/backup}
    consul:
        image: 'securebrowsing/shield-consul-agent:latest'
        networks:
            - shield-core
        #Published only for Dev    
        ports:
            - '8500:8500'
        deploy:
            mode: replicated
            replicas: 1
            update_config: {parallelism: 1, failure_action: rollback}
            restart_policy: {condition: any}
            resources: {limits: {memory: 1GB, cpus: '1'}}
        environment:
            - 'TZ=UTC'
            # eth2 for Dev
            - 'CONSUL_BIND_INTERFACE=eth2'
            - 'RUN_AGENT=yes'
            - 'LOGSTASH_FIELDS=service=consulclient'

###################################################################### Shield services part ##################################################################

    shield-admin:
        image: 'securebrowsing/shield-admin:latest'
        hostname: shield-admin
        ports:
            - '8181:8181'
        environment:
            - 'TZ=UTC'
            - 'SHIELD_VER=8.0.0.latest'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=admin'
        volumes:
            - 'admin:/data/consul'
            - '/var/run/docker.sock:/var/run/docker.sock'
        networks:
            - shield-core
        deploy:
            mode: replicated
            replicas: 1
            update_config: {failure_action: rollback}
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 500MB, cpus: '0.5'}}
    icap-server:
        image: 'securebrowsing/icap-server:latest'
        # user: nobody
        hostname: icap-server
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'SHIELD_VER=8.0.0.latest'
            - 'SHIELD_IP=IP_ADDRESS'
            - 'LOGSTASH_FIELDS=service=icap'
            #- 'SHIELD_WATERMARK=TRUE'
        ulimits:
            nofile: {soft: 65535, hard: 65535}
        networks:
            - shield-core
        ports:
            - '1344:1344'
        deploy:
            mode: replicated
            replicas: 1
            update_config: {failure_action: rollback}
            restart_policy: {condition: any}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 500MB, cpus: '1'}}
    broker-server:
        image: 'securebrowsing/broker-server:latest'
        # user: nobody
        hostname: broker-server
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            resources: {limits: {memory: 100MB, cpus: '1'}, reservations: {memory: 50MB}}
            placement: {constraints: [node.labels.management==yes]}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=broker'
            - 'SHIELD_VER=8.0.0.latest'
        networks:
            - shield-core
        secrets:
            - shield-system-id
    proxy-server:
        image: 'securebrowsing/proxy-server:latest'
        hostname: proxy-server
        ulimits:
            nofile: {soft: 65535, hard: 65535}
        networks:
            - shield-core
        environment:
            - 'TZ=UTC'
            - 'SSLEXCLUSION=true'
            - 'LOGSTASH_FIELDS=service=proxy'
        env_file: proxy-server.env
        deploy:
            mode: replicated
            replicas: 2
            restart_policy: {condition: any}
            update_config: {parallelism: 1, delay: 10s, failure_action: rollback}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 500MB, cpus: '1'}}
    notifier:
        image: 'securebrowsing/shield-notifier:latest'
        hostname: notifier
        networks:
            - shield-core
        deploy:
            mode: replicated
            replicas: 1
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 512MB, cpus: '0.5'}}
        environment:
            - 'TZ=UTC'
    authproxy:
        image: 'securebrowsing/shield-authproxy:latest'
        hostname: authproxy
        deploy:
            mode: global
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}
        networks:
            - shield-core
        ports:
            - {target: 3128, published: 3128, protocol: tcp, mode: host}
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=authproxy'
    web-service:
        image: 'securebrowsing/shield-web-service:latest'
        hostname: web-service
        ports:
            - '80:1345'
        networks:
            - shield-core
        environment:
            - 'TZ=UTC'
            - 'SHIELD_IP=IP_ADDRESS'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=webservice'
        deploy:
            mode: replicated
            replicas: 1
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 500MB, cpus: '1'}}
    cdr-dispatcher:
        image: 'securebrowsing/shield-cdr-dispatcher:latest'
        hostname: cdr-dispatcher
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=cdrdispatcher'
        networks:
            - shield-core
        deploy:
            mode: replicated
            replicas: 2
            endpoint_mode: dnsrr
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}
    cdr-controller:
        image: 'securebrowsing/shield-cdr-controller:latest'
        hostname: cdr-controller
        environment:
            - 'TZ=UTC'
            - 'NODE_ENV=production'
            - 'LOGSTASH_FIELDS=service=cdrcontroller'
        networks:
            - shield-core
        deploy:
            mode: replicated
            replicas: 1
            restart_policy: {condition: any}
            update_config: {parallelism: 1, failure_action: rollback}
            placement: {constraints: [node.labels.shield_core==yes]}
            resources: {limits: {memory: 1GB, cpus: '1'}}

    ############################### Docker managment part ##############################################################

    portainer:
        image: 'securebrowsing/shield-portainer:latest'
        hostname: portainer
        #Published only for Dev
        ports:
            - '9000:9000'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - 'portainer:/data'
        environment:
            - 'TZ=UTC'
            - 'LOGSTASH_FIELDS=service=portainer'
        networks:
            - shield-core
        deploy:
            restart_policy: {condition: any}
            update_config: {failure_action: rollback}
            placement: {constraints: [node.labels.management==yes]}
            resources: {limits: {memory: 100MB, cpus: '0.5'}}
volumes:
    elastic:
    portainer:
    admin:

networks:
    shield-core:
        driver: overlay
        ipam:
            driver: default
            config: [{subnet: 10.20.0.0/16}]

secrets:
    shield-system-id:
        external: true
